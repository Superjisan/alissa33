{"version":3,"sources":["config/db.js","coupons/coupons-container.js","App.js","api/index.js","serviceWorker.js","index.js"],"names":["client","faunadb","Client","secret","process","q","query","CouponContainer","props","coupons","map","coupon","Card","key","ref","value","id","style","width","height","float","Body","Img","variant","src","data","imgUrl","Title","title","Text","description","expires","alreadyUsed","App","useState","setCoupons","fetchCoupons","Paginate","Match","Ref","then","response","getAllDataQuery","Get","catch","error","console","message","res","log","useEffect","Container","fluid","className","Row","Col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oWACMA,EAAS,IAAIC,IAAQC,OAAO,CACjCC,OAAQC,6CAEHC,EAAIJ,IAAQK,M,QCDLC,EAAkB,SAAAC,GAE7B,OADoBA,EAAZC,QACOC,KAAI,SAAAC,GACjB,OACE,kBAACC,EAAA,EAAD,CAAMC,IAAKF,EAAOG,IAAIC,MAAMC,GAAIC,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAASC,MAAO,SAC/E,kBAACR,EAAA,EAAKS,KAAN,KACE,kBAACT,EAAA,EAAKU,IAAN,CAAUC,QAAQ,MAAMC,IAAKb,EAAOc,KAAKC,SACzC,kBAACd,EAAA,EAAKe,MAAN,KAAahB,EAAOc,KAAKG,OACzB,kBAAChB,EAAA,EAAKiB,KAAN,KACGlB,EAAOc,KAAKK,aAEf,kBAAClB,EAAA,EAAKiB,KAAN,oBACelB,EAAOc,KAAKM,QAAQhB,OAEnC,kBAACH,EAAA,EAAKiB,KAAN,gCACoBlB,EAAOc,KAAKO,oBCkB3BC,MA7Bf,WAAgB,IAAD,EAEiBC,mBAAS,IAF1B,mBAENzB,EAFM,KAEG0B,EAFH,KAIPC,EAAe,WCPtBpC,EACEM,MAAMD,EAAEgC,SAAShC,EAAEiC,MAAMjC,EAAEkC,IAAI,kCAC/BC,MAAK,SAACC,GACN,IACMC,EADUD,EAAShB,KACOf,KAAI,SAACI,GACpC,OAAOT,EAAEsC,IAAI7B,MAEd,OAAOd,EAAOM,MAAMoC,GAAiBF,MAAK,SAACf,GAAD,OAAUA,QAEpDmB,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAM,UAAWA,EAAME,YDDtCP,MAAK,SAACQ,GACbF,QAAQG,IAAI,CAAED,QACdb,EAAWa,OAQf,OAJAE,qBAAU,WACRd,MACC,IAGD,kBAACe,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,QACzB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,qDAKJ,kBAAC,EAAD,CAAiB9C,QAASA,MEnBZ+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd1B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f07ea0fe.chunk.js","sourcesContent":["import faunadb from 'faunadb';\nconst client = new faunadb.Client({\n\tsecret: process.env.REACT_APP_FAUNDA_DB_KEY\n});\nconst q = faunadb.query;\nexport { client, q };","import React from 'react';\nimport { Card } from 'react-bootstrap'\n\nexport const CouponContainer = props => {\n  const { coupons } = props\n  return coupons.map(coupon => {\n    return (\n      <Card key={coupon.ref.value.id} style={{ width: '18rem', height: '36rem', float: 'left' }}>\n        <Card.Body>\n          <Card.Img variant=\"top\" src={coupon.data.imgUrl} />\n          <Card.Title>{coupon.data.title}</Card.Title>\n          <Card.Text>\n            {coupon.data.description}\n          </Card.Text>\n          <Card.Text>\n            Expires On: {coupon.data.expires.value}\n          </Card.Text>\n          <Card.Text>\n            Already Used: {`${coupon.data.alreadyUsed}`}\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    )\n  })\n\n\n}","import React, { useEffect, useState } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap'\n\nimport './App.css';\nimport { getAll } from './api';\nimport { CouponContainer } from './coupons/coupons-container';\n\nfunction App() {\n\n  const [coupons, setCoupons] = useState([])\n\n  const fetchCoupons = () => {\n    getAll().then((res) => {\n      console.log({ res })\n      setCoupons(res)\n    });\n  };\n\n  useEffect(() => {\n    fetchCoupons();\n  }, []);\n\n  return (\n    <Container fluid className=\"root\">\n      <Row>\n        <Col>\n          <h1>\n            Alissa's 33 Coupons\n          </h1>\n        </Col>\n      </Row>\n      <CouponContainer coupons={coupons} />\n    </Container>\n  );\n}\n\nexport default App;\n","\nimport { client, q } from '../config/db';\n\nexport const getAll = () =>\n\tclient\n\t\t.query(q.Paginate(q.Match(q.Ref('indexes/getAllCoupleCoupons'))))\n\t\t.then((response) => {\n\t\t\tconst resData = response.data;\n\t\t\tconst getAllDataQuery = resData.map((ref) => {\n\t\t\t\treturn q.Get(ref);\n\t\t\t});\n\t\t\treturn client.query(getAllDataQuery).then((data) => data);\n\t\t})\n\t\t.catch((error) => console.error('Error: ', error.message));\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'dotenv/config';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}